swagger: "2.0"
info:
  version: "v1"
  title: "GoBolt Parcel"
  description: |
    Welcome to the GoBolt Parcel API Documentation. You can use the GoBolt API to requests rates, create an order, delete an order, retrieve a shipping label.
    ## Authentication
    The GoBolt Parcel APIs use the [OAuth 2.0 protocol](https://www.oauth.com/oauth2-servers/access-tokens/) for authentication and authorization. GoBolt supports the [client credentials](https://www.oauth.com/oauth2-servers/access-tokens/) grant type for Oauth 2.0 
      
    Before authenticating with the APIs listed in this document, you must have a GoBolt Parcel `user account` created with your email and password.
      
    ### Basic Steps
      
    All applications follow a basic pattern when accessing a GoBolt Parcel API using OAuth 2.0. At a high level, you will follow four steps:
      
    #### 1. Create a. OAuth 2.0 Service User
      
    A service user is a special type of GoBolt user intended to represent a non-human user that needs to authenticate and be authorized to access data in GoBolt Parcel APIs.
    It is crucial that you use a service user account to access GoBolt Parcel APIs in your client applications. This way, your GoBolt Parcel integration will be protected from changes in your user accounts such as password resets or account deactivations.
      
    In this step, you will exchange your user account credentials (email & password) for service account credentials. There are two ways of doing so:
      
      1. Using the [Create A Service Account](https://hasan-ahmed.github.io/parcel-api-docs/#tag/Service-Accounts-and-Tokens/paths/~1users~1service/post) API
      2. Using the [GoBolt Parcel Portal](https://www.parcel-stage.gobolt.com/serviceUser)
        
    #### 2. Use your service user to obtain an access token
      
    Next, to access GoBolt Parcel APIs, your client application must use a service account created in Step 1 to obtain an `access_token`. By calling the [Request Access Token](https://hasan-ahmed.github.io/parcel-api-docs/#tag/Service-Accounts-and-Tokens/paths/~1auth~1token/post) API, you will be able to exchange your service account's client_id (username) and client_secret(password) for a token.
      
    #### 3. Send the access token to our APIs
      
    Once your application has received an `access-token`, it needs to send the token in every subsequent API request in an [HTTP Authorization request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization)
      
    #### 4. Refresh the access token, if necessary.
      
    Access tokens have limited lifetimes. If your application needs access to a GoBolt Parcel endpoint beyond the lifetime of a single access token, it can obtain a refresh token. A refresh token allows your application to obtain new access tokens.
  x-logo:
    url: "https://www.app.boxknight.com/static/media/gobolt_logo.5bddbc4c.png"
    background: "#ffffff"
x-servers:
  - url: https://api-parcel-stage.gobolt.com
    description: Development/Staging environment
  - url: https://api-parcel.gobolt.com
    description: Production Environment
host: api-parcel.gobolt.com
basePath: /v1
tags:
  - name: "Service Accounts & Tokens"
    description: "Everything about authentication for making API requests"
  - name: "Rates"
    description: "Everything about shipping rates"
  - name: "Orders"
    description: "Everything about orders"
  - name: "Tracking"
    description: "Tracking information about an order"
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: application
    tokenUrl: /oauth/token
    scopes: {}
    description: |
      The GoBolt Parcel APIs use the [OAuth 2.0 protocol](https://www.oauth.com/oauth2-servers/access-tokens/) for authentication and authorization. GoBolt supports the [client credentials](https://www.oauth.com/oauth2-servers/access-tokens/) grant type for Oauth 2.0 

      Before authenticating with the APIs listed in this document, you must have a GoBolt Parcel `user account` created with your email and password.

      ### Basic Steps

      All applications follow a basic pattern when accessing a GoBolt Parcel API using OAuth 2.0. At a high level, you will follow four steps:

      #### 1. Create a. OAuth 2.0 Service User

      A service user is a special type of GoBolt user intended to represent a non-human user that needs to authenticate and be authorized to access data in GoBolt Parcel APIs.
      It is crucial that you use a service user account to access GoBolt Parcel APIs in your client applications. This way, your GoBolt Parcel integration will be protected from changes in your user accounts such as password resets or account deactivations.

      In this step, you will exchange your user account credentials (email & password) for service account credentials. There are two ways of doing so:

        1. Using the [Create A Service Account](https://hasan-ahmed.github.io/parcel-api-docs/#tag/Service-Accounts-and-Tokens/paths/~1users~1service/post) API
        2. Using the [GoBolt Parcel Portal](https://www.demo.boxknight.com/serviceUser)
        
      #### 2. Use your service user to obtain an access token

      Next, to access GoBolt Parcel APIs, your client application must use a service account created in Step 1 to obtain an `access_token`. By calling the [Request Access Token](https://hasan-ahmed.github.io/parcel-api-docs/#tag/Service-Accounts-and-Tokens/paths/~1auth~1token/post) API, you will be able to exchange your service account's client_id (username) and client_secret(password) for a token.

      #### 3. Send the access token to our APIs

      Once your application has received an `access-token`, it needs to send the token in every subsequent API request in an [HTTP Authorization request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization)

      #### 4. Refresh the access token, if necessary.

      Access tokens have limited lifetimes. If your application needs access to a GoBolt Parcel endpoint beyond the lifetime of a single access token, it can obtain a refresh token. A refresh token allows your application to obtain new access tokens.

  Authorization-Header:
    type: apiKey
    in: header
    name: Authorization
    description: >-
      Once you've generated a `token` with the first step of the OAuth 2.0 flow, you must include a `Authorization` header
      with the token to make authenticated requests to secure endpoints.

paths:
  /users/service:
    x-summary: Service account
    post:
      tags:
        - "Service Accounts & Tokens"
      description: >-
        Use your admin token to create a service account in order to use our api
      summary: Create Service Account
      security:
        - Oauth2: []
        - Authorization-Header: []
      responses:
        200:
          description: "Successful Response"
          schema:
            $ref: "#/definitions/ServiceAccountResponse"
  /oauth/token:
    x-summary: Request Access Token
    post:
      tags:
        - "Service Accounts & Tokens"
      description: >-
        Exchange the client_id(username) and client_secret(password) of a service account for an access_token.
      summary: Request Access Token
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/AuthTokenRequest"
      responses:
        200:
          description: "Successful Response"
          schema:
            $ref: "#/definitions/AuthTokenResponse"
  /rates:
    x-summary: Rates
    post:
      tags:
        - "Rates"
      description: >-
        This endpoint retrieves a list of all the shipping rates for a given potential order in accordance to the pricing 
        structure established when creating your merchant organization. If either the origin postal code or
        destination postal code is not in GoBolt's serviceable area, the endpoint will return an empty list.
      summary: Retrieve Rates
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/GetRatesRequest"
      security:
        - Oauth2: []
        - Authorization-Header: []
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ArrayOfRates"
  /labels/{orderId}:
    x-summary: Labels
    get:
      tags:
        - "Labels"
      description: >-
        This endpoint retrieves a label (zpl, pdf or pdf_letter) from an orderId. The pdf_letter format fits a full standard letter page with a dotted line to cut the label.
      summary: Retrieve Labels
      parameters:
        - name: orderId
          in: path
          description: The id of the order that we want to get the label from
          required: true
          type: string
        - name: format
          in: query
          description: format of the label (zpl, pdf or pdf_letter)
          required: true
          type: string
      security:
        - Oauth2: []
        - Authorization-Header: []
      responses:
        200:
          description: "the label in zpl or pdf file"
  /orders:
    x-summary: Orders
    post:
      tags:
        - "Orders"
      description: >-
        This endpoint creates a new order to be delivered by GoBolt. This operation is treated as a long running task. As soon as your request is validated,
        you will receive a `200 OK` response with the order `id` while processing continues in the background.
      summary: Create a New Order
      security:
        - OAuth2: []
        - Authorization-Header: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/OrderCreateRequest"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/OrderCreateSuccessResponse"
    get:
      tags:
        - "Orders"
      description: >-
        This endpoint is doing a batch get all the orders associated with the service account
      summary: Get multiple orders
      security:
        - OAuth2: []
        - Authorization-Header: []
      parameters:
        - name: limit
          in: query
          description: The number of results to be retrieved per request.
          required: false
          type: number
          default: 100
        - name: startAt
          in: query
          description: The last order ID in the query. Optional when making an initial request.
          required: false
          type: string
        - name: createdAt
          in: query
          description: The date of creation of the last order in the query. Optional when making an initial request.
          required: false
          type: string
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/ArrayOfOrders"

  /orders/{id}:
    x-summary: Get and Delete Order
    get:
      tags:
        - "Orders"
      description: >-
        This endpoint get the order's information.
      summary: Get Order by Id
      security:
        - OAuth2: []
        - Authorization-Header: []
      parameters:
        - name: id
          in: path
          description: The id of the order that will be created
          required: true
          type: string
      responses:
        200:
          schema:
            $ref: "#/definitions/Order"
          description: "Successful response"

    delete:
      tags:
        - "Orders"
      description: >-
        This endpoint delete the order's information.
      summary: Delete Order by Id
      security:
        - OAuth2: []
        - Authorization-Header: []
      parameters:
        - name: id
          in: path
          description: The id of the order that will be deleted
          required: true
          type: string
      responses:
        200:
          schema:
            $ref: "#/definitions/Order"
          description: "Successful response"
  /orders/{id}/packages:
    x-summary: Update the packages for fields ref number, tracking number, size or weight. The number of packages cannot be updated.
    put:
      tags:
        - "Orders"
      description: >-
        This endpoint modifies the packages in an order. The number of packages in the new package list must be the same as the original order. The weight of each new package should not exceed the weight limit set for the original order's delivery type. For instance, if the original order is labeled as `PARCEL`, the weights of the new packages must stay within the `PARCEL` limit.
      summary: Update the packages in an order.
      security:
        - OAuth2: []
        - Authorization-Header: []
      parameters:
        - name: id
          in: path
          description: The id of the order that will be updated
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/UpdateArrayOfPackages"
      responses:
        200:
          description: "Successful response"
  /orders/{id}/pickupready:
    x-summary: Mark an order as ready for pickup. Also referred to as confirming an order or fulfilling an order.
    patch:
      tags:
        - "Orders"
      description: >-
        This endpoint marks an order as ready for pickup. Also referred to as confirming an order or fulfilling an order.
      summary: Mark order as ready for pickup.
      security:
        - OAuth2: []
        - Authorization-Header: []
      parameters:
        - name: id
          in: path
          description: The id of the order that will be updated
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
      responses:
        200:
          description: "Successful response"

  /tracking/orders/{id}:
    x-summary: Get the tracking information of an order by order id.
    get:
      tags:
        - "Tracking"
      description: >-
        This endpoint returns the tracking information for an order. If the request includes the valid postal code associated with the order being retrieved in the query string parameters, the endpoint will return a detailed tracking response. This may include live tracking information if available.
      summary: Get the tracking information of an order by order id.
      security:
        - OAuth2: []
        - Authorization-Header: []
      parameters:
        - name: id
          in: path
          description: The id of the order for which tracking information is being requested.
          required: true
          type: string
        - name: showPackageTracking
          in: query
          description: Flag for returning the package-level tracking info in response
          required: false
          default: false
          type: boolean
      responses:
        200:
          schema:
            $ref: "#/definitions/Tracking"
          description: "Success tracking response"

definitions:
  orderStatus:
    type: string
    enum: &orderStatus
      - CREATED
      - GEOCODEDFAILED
      - OUT_OF_FSA
      - RATE_FAILED
      - GEOCODED
      - PICKUP_READY
      - CARRIER_PICKED_UP
      - SHIPMENT_CREATED
      - SHIPMENT_PROCESSING
      - OUT_FOR_DELIVERY
      - DELIVERED
      - FAILED
      - CANCELLED
      - ARCHIVED

  packageStatus:
    type: string
    enum: &packageStatus
      - CARRIER_PICKED_UP
      - SHIPMENT_CREATED
      - SHIPMENT_PROCESSING
      - OUT_FOR_DELIVERY
      - DELIVERED
      - FAILED
      - CANCELLED
      - ARCHIVED

  service:
    type: string
    enum: &service
      - NEXTDAY
      - SAMEDAY
      - SCHEDULED
      - CUSTOMER_BOOKING

  deliveryService:
    type: string
    enum: &deliveryService
      - THRESHOLD
      - TO_THE_DOOR
      - WHITE_GLOVE
      - ROOM_OF_CHOICE

  deliveryType:
    type: string
    enum: &deliveryType
      - PARCEL
      - HEAVY

  Recipient:
    title: Recipient
    type: object
    properties:
      name:
        type: string
        description: The full name of the recipient.
        example: Charles Carmichael
      phone:
        type: string
        description: The phone number of the recipient in the following format +1<area code><10 digit phone number>
        pattern: '^[+]1\d{10}$'
        example: "+15145573849"
      email:
        type: string
        description: email of the recipient
        example: charles.carmichael@gobolt.com
      notes:
        type: string
        description: Notes relating specifically to the recipient
        example: Do not text, call instead.
    required:
      - name
      - phone
      - email

  Address:
    title: Address
    type: object
    properties:
      street:
        type: string
        description: The street number and street name of the address. If needed, the street number postfix can be included as well.
        example: 4455A Boul. Poirier
      unit:
        type: string
        description: The unit, apartment and/or business name of the address. This property is not parsed during the geolocation of the address and can be descriptive.
        example: unit204 - GoBolt HQ
      city:
        type: string
        description: The city or municipality of the address.
        example: Montreal
      province:
        type: string
        description: The province of the address. Can be written in short form (i.e. QC)
        example: Quebec
      country:
        type: string
        description: The country of the address. Can be written in short form (i.e. CA)
        example: Canada
      postalCode:
        type: string
        description: The postal code of the address.
        example: H4R 2A4
      isBusinessAddress:
        type: boolean
        description: This optional field let's us know if the recipient address is a business address. This allows us to do our best to ensure that the delivery is completed during business hours, or retrieve an alternate address from the recipient.The postal code of the address.
        example: true
    required:
      - street
      - city
      - province
      - country
      - postalCode

  Geocoded_Address:
    title: Geocoded Address
    type: object
    properties:
      number:
        type: string
        description: The street number of the address.
        example: 1234
      street:
        type: string
        description: The street name of the address.
        example: Boul. Poirier
      city:
        type: string
        description: The city or municipality of the address.
        example: Montreal
      province:
        type: string
        description: The province of the address. Can be written in short form (i.e. QC)
        example: Quebec
      country:
        type: string
        description: The country of the address. Can be written in short form (i.e. CA)
        example: Canada
      postalCode:
        type: string
        description: The postal code of the address.
        example: H4R 2A4
      sublocality:
        type: string
        description: The sublocality within a city.
        example: "Communauté-Urbaine-de-Montréal"
      location:
        type: object
        description: The GPS location of that address
        $ref: "#/definitions/Location"

  Location:
    title: Location
    type: object
    properties:
      lat:
        type: number
        description: The latitude value of the location
        example: 45.4755722
      lng:
        type: number
        description: The longitude value of the location
        example: -73.61911979999999

  SizeOptions:
    title: SizeOptions
    type: object
    description: The dimensions of the package.
    properties:
      length:
        type: integer
        format: int32
        description: The length of the package
        example: 20
      width:
        type: integer
        format: int32
        description: The width of the package
        example: 15
      height:
        type: integer
        format: int32
        description: The height of the package
        example: 15
      unit:
        type: string
        description: The unit of measurement for the package. Can be either `cm` or `inch`.
        example: inch
    required:
      - length
      - width
      - height
      - unit

  WeightOptions:
    title: WeightOptions
    type: object
    description: The weight of the package. Orders will be classified as `HEAVY` if any of its package are over 50lbs.
    properties:
      weight:
        type: integer
        format: int32
        description: The weight of the package
        example: 20
      unit:
        type: string
        description: The unit of weight for the package. Can be either `lb` or `kg`.
        example: lb
    required:
      - weight
      - unit

  UpdateArrayOfPackages:
    title: Packages
    type: object
    description: Object containing an array of packages which contains the package information for size and weight.
    properties:
      packages:
        type: array
        description: Array of packages which contains the package information for size and weight.
        items:
          type: object
          required:
            - weightOptions
            - sizeOptions
          properties:
            refNumber:
              type: string
              description: The reference number of the package.
              example: "12345"
            trackingNumber:
              type: string
              description: The tracking number of the package to be updated.
              example: "KC15YTWJ0EBV"
            weightOptions:
              type: object
              $ref: "#/definitions/WeightOptions"
            sizeOptions:
              type: object
              $ref: "#/definitions/SizeOptions"

  CreateArrayOfPackages:
    title: Packages
    type: array
    description: Array of packages which contains the package information for size and weight.
    items:
      type: object
      required:
        - weightOptions
        - sizeOptions
      properties:
        refNumber:
          type: string
          description: The reference number of the package.
          example: "12345"
        weightOptions:
          type: object
          $ref: "#/definitions/WeightOptions"
        sizeOptions:
          type: object
          $ref: "#/definitions/SizeOptions"

  Packages:
    title: Packages
    type: array
    description: Array of packages which contains the package information for size and weight.
    items:
      type: object
      properties:
        trackingNumber:
          type: string
          description: The ID used to identify and track the package.
          example: RRRIPZUTSLVW
        refNumber:
          type: string
          description: The reference number of the package.
          example: "12345"
        status:
          type: string
          description: The status of the package. This attribute does not exist if the package has not been received.
          enum: *packageStatus
        weightOptions:
          type: object
          $ref: "#/definitions/WeightOptions"
        sizeOptions:
          type: object
          $ref: "#/definitions/SizeOptions"

  GetRatesRequest:
    title: Get Rates Request
    type: object
    required:
      - postalCode
    properties:
      postalCode:
        description: The postal code of the recipient of the order
        type: string
        example: "H4X1Z5"
      originPostalCode:
        description: The origin postal code for the order. If this parameter is omitted, it will default to the pickup location set up in your merchant organization.
        type: string
        example: "H4R2A4"
      packages:
        type: array
        $ref: "#/definitions/CreateArrayOfPackages"

  OrderCreateRequest:
    type: object
    required:
      - recipient
      - recipientAddress
      - originAddress
      - packageCount
      - packages
    properties:
      recipient:
        type: object
        description: The recipient of the order to be delivered.
        $ref: "#/definitions/Recipient"
      recipientAddress:
        type: object
        description: The address of the recipient.
        $ref: "#/definitions/Address"
      originAddress:
        type: object
        description: The address of where the order should be picked up from
        $ref: "#/definitions/Address"
      packageCount:
        type: integer
        format: int32
        description: The number of separate packages to be delivered for this order, up to a maximum of 20.
        example: 1
      service:
        type: string
        enum: *service
        default: NEXTDAY
        description: The service of the order, which determines the price and speed of the delivery. `CUSTOMER_BOOKING` is the only applicable option for `HEAVY` orders.
      deliveryService:
        type: string
        enum: *deliveryService
        default: TO_THE_DOOR
        description: The delivery service of the order, which determines the level of service our staff provide when delivering the order. Mandatory when `CUSTOMER_BOOKING` service is selected.
      notes:
        type: string
        description: Any notes related specifically to the destination address.
        example: The entrance is through the green fence on the left. If no answer, leave behind the black bin.
      refNumber:
        type: string
        description: A reference number from your side that we can use to contact you about the order
        example: shopifyid1234
      merchantDisplayName:
        type: string
        description: A display name that's going to be shown in the order's label
        example: Metro Fleury No 2
      packages:
        type: array
        description: Array of packages belonging to the order
        $ref: "#/definitions/CreateArrayOfPackages"

  OrderCreateSuccessResponse:
    title: Create Order Success Response
    type: object
    properties:
      id:
        type: string
        description: The id of the order that will be created
        example: "FF4F198RNMV5"
      packages:
        type: array
        description: Array of packages on the order
        $ref: "#/definitions/Packages"

  Tracking:
    title: Tracking Response
    type: object
    required:
      - id
      - packageCount
      - status
      - timeline
    properties:
      id:
        type: string
        description: The order's id. This is also the tracking number.
      packageCount:
        type: number
        description: The number of packages in the order, up to a maximum of 20.
      status:
        type: string
        enum: *orderStatus
        description: The status of the order.
      completeAfter:
        type: number
        description: Epoch millisecond timestamp of the start of the expected delivery window. This value is not based on a real-time ETA, but is calculated based on the merchant SLAs.
      completeBefore:
        type: number
        description: Epoch millisecond timestamp of the end of the expected delivery window. This value is not based on a real-time ETA, but is calculated based on the merchant SLAs.
      positionInLine:
        type: number
        description: The position of this delivery in the driver's route. This is equivalent to `number of stops remaining`. This value is only populated if the status is `OUT_FOR_DELIVERY`.
      location:
        type: object
        description: The live GPS location of the driver executing the delivery. This value is only present when the status is `OUT_FOR_DELIVERY` and position in line is `1`.
        $ref: "#/definitions/Location"
      timeline:
        type: array
        description: A record of all the order's historical events.
        items:
          type: object
          properties:
            timestamp:
              type: number
              description: Epoch millisecond timestamp of when the event took place.
            eventName:
              type: string
              enum: *orderStatus
              description: Name of the event
            trackingNumber:
              type: string
              description: The order ID or an order's package's tracking number associated with the event
            eventDescription:
              type: string
              description: The description of the event
            verificationPhotosUrls:
              type: array
              items:
                type: string
              description: A list of URLs to download the proof of delivery images. This value is only present when the event is `DELIVERED`.
            signaturePhotosUrls:
              type: array
              items:
                type: string
              description: A list of URLs to download the delivery customer signature images. This value is only present when the event is `DELIVERED`.
    example:
      {
        "id": "EBWIVCXADDHW",
        "packageCount": 1,
        "status": "OUT_FOR_DELIVERY",
        "completeAfter": 1668448800000,
        "completeBefore": 1668481200000,
        "positionInLine": 1,
        "location": { "lng": -73.49683816091526, "lat": 45.511423360443466 },
        "timeline":
          [
            {
              "event": "CREATED",
              "trackingNumber": "EBWIVCXADDHW",
              "timestamp": 1668448732000,
            },
            {
              "description": "Address is valid",
              "event": "GEOCODED",
              "trackingNumber": "EBWIVCXADDHW",
              "timestamp": 1668448732500,
            },
            {
              "event": "SHIPMENT_PROCESSING",
              "trackingNumber": "OKWIVCXADDHW",
              "timestamp": 1668448733000,
            },
            {
              "signaturePhotosUrls": [],
              "event": "SHIPMENT_PROCESSING",
              "trackingNumber": "EBWIVCXADDHW",
              "verificationPhotosUrls": [],
              "timestamp": 1668448733000,
            },
            {
              "event": "OUT_FOR_DELIVERY",
              "trackingNumber": "OKWIVCXADDHW",
              "timestamp": 1668461252000,
            },
            {
              "signaturePhotosUrls": [],
              "event": "OUT_FOR_DELIVERY",
              "trackingNumber": "EBWIVCXADDHW",
              "verificationPhotosUrls": [],
              "timestamp": 1668461252000,
            },
          ],
      }

  Order:
    title: Order object
    type: object
    properties:
      id:
        type: string
        description: The order's id
        example: "FF4F198RNMV5"
      createdAt:
        type: string
        description: Datetime of the order's creation in ISO time
        example: "2019-10-25T22:56:06.000Z"
      createdBy:
        type: string
        description: Service account's id
        example: "93e66b39-0uf8-40bb-742a-911235a09743"
      merchantId:
        type: string
        description: The merchant's id
        example: "13e11b39-0uf8-40bb-742a-913125a09743"
      orderStatus:
        type: string
        enum: *orderStatus
        description: The current status of the order
        example: "GEOCODED"
      rateChoice:
        type: object
        description: The delivery service chosen to complete this order.
        properties:
          price:
            type: number
            description: The price for the rate in CAD.
            example: 5.00
          service:
            type: string
            enum: *service
            description: The service of the order, which determines the price and speed of the delivery. `CUSTOMER_BOOKING` is the only applicable option for `HEAVY` orders.
            example: "SAMEDAY"
          deliveryService:
            type: string
            enum: *deliveryService
            description: The delivery service of the order, which determines the level of service our staff provide when delivering the order. Mandatory when `CUSTOMER_BOOKING` service is selected.
            example: "THRESHOLD"
      deliveryType:
        type: string
        enum: *deliveryType
        description: The type of delivery based on the weight of the packages in an order.
        example: PARCEL
      validAddress:
        type: boolean
        description: The address validity according to our validator.
        example: true
      labelUrl:
        type: string
        description: The URL to download the order's ZPL label
        example: "https://label12345.s3.amazonaws.com/GoBolt-ShippingLabel-1234567.zpl"
      pdfLabelUrl:
        type: string
        description: The URL to download the order's PDF label
        example: "https://label12345.s3.amazonaws.com/GoBolt-ShippingLabel-1234567.pdf"
      recipient:
        type: object
        description: The recipient of the order to be delivered.
        $ref: "#/definitions/Recipient"
      recipientAddress:
        type: object
        description: The address of the recipient.
        $ref: "#/definitions/Geocoded_Address"
      originAddress:
        type: object
        description: The address of where the order should be picked up from
        $ref: "#/definitions/Geocoded_Address"
      packageCount:
        type: integer
        format: int32
        description: The number of separate packages to be delivered for this order, up to a maximum of 20.
        example: 1
      packages:
        type: array
        description: Array of packages on the order
        $ref: "#/definitions/Packages"
      notes:
        type: string
        description: Any notes related specifically to the destination address.
        example: The entrance is through the green fence on the left. If no answer, leave behind the black bin.
      refNumber:
        type: string
        description: A reference number from your side that we can use to contact you about the order
        example: shopifyid1234
      completeAfter:
        type: number
        description: epoch (milliseconds) of the beginning of pickup window (need to be later than right now)
        example: 1578439750000
      completeBefore:
        type: number
        description: epoch (milliseconds) of the end of pickup window (need to be later than completeAfter)
        example: 1578439950000
      merchantDisplayName:
        type: string
        description: A display name that's going to be shown in the order's label
        example: Metro Fleury No 2

  AuthTokenRequest:
    title: Auth Token Request
    properties:
      client_id:
        type: string
        description: The client_id (username) for the account the access token is being request for. This value is required if you are requesting an access token.
        example: "user-service-account-test"
      client_secret:
        type: string
        description: The client_secret (password) for the account the auth token is being request for. This value is required only if you are requesting an access token.
        example: "userpassword"
      grant_type:
        type: string
        description: The Oauth 2.0 grant type that is being requested. Value must be `client_credentials`. This value is always required.
        example: "client_credentials"
      refresh_token:
        type: string
        description: The refresh token previously issued to the client. This value is required only if you are refreshing an access token.
        example: "DAV-aS9rquszIiQZqpZ8GCfMl"

  ServiceAccountResponse:
    title: Service Account response
    properties:
      username:
        type: string
        description: The username for the newly created service account.
        example: "user-service-account-test"
      password:
        type: string
        description: The password for for the newly created service account.
        example: "userpassword"

  AuthTokenResponse:
    title: Auth Token Response
    properties:
      access_token:
        type: string
        description: The access token string to be included in the Authorization header of API requests.
        example: "eyJjdHkiOiJKV1QiLCJlbmMiO"
      token_type:
        type: string
        description: The type of token this is, always `Bearer`
        example: Bearer
      expires_in:
        type: number
        description: Duration of time the access token is granted for in seconds. GoBolt Parcel API's access tokens are valid for 3600 seconds.
        example: 3600
      refresh_token:
        type: string
        description: A refresh token which your application can use to obtain another access token.
        example: "xzzf-j_37pZmRW2SixZPzCVC8aGo21U5"

  ArrayOfRates:
    type: array
    items:
      type: object
      properties:
        price:
          type: number
          description: The price for the rate in CAD.
        service:
          type: string
          enum: *service
          description: A code representing the service level for the rate. `CUSTOMER_BOOKING` is the only applicable option for `HEAVY` orders.
        name:
          type: string
          description: The human readable name for the rate.
        description:
          type: string
          description: A description of the service provided by this rate and the estimated delivery date.
        estimateDay:
          type: string
          description: The estimate date or range of delivery depending on merchant
        estimateFrom:
          type: string
          description: The minimum estimate date of delivery depending on merchant
        estimateTo:
          type: string
          description: The maximum date of delivery depending on merchant
    example:
      - price: 10
        service: "NEXTDAY"
        name: "GoBolt Next-Day Delivery"
        description: "Get your package the next opening day of the merchant (2019-10-30)"
        estimateDay: "2019-10-30"
        estimateFrom: "2019-10-30"
        estimateTo: "2019-10-30"
      - price: 12
        service: "SAMEDAY"
        name: "GoBolt Same-Day Delivery"
        description: "Get your package before the end of the day (2019-10-29)"
        estimateDay: "2019-10-29"
        estimateFrom: "2019-10-29"
        estimateTo: "2019-10-29"
      - price: 12
        service: "SCHEDULED"
        name: "GoBolt Scheduled Delivery"
        description: "Get your package in a 3h window within the next 2 weeks (2019-10-29 to 2019-11-11)"
        estimateDay: "2019-10-29 to 2019-11-11"
        estimateFrom: "2019-10-29"
        estimateTo: "2019-11-11"

  ArrayOfOrders:
    type: object
    properties:
      orders:
        type: array
        items:
          type: object
          $ref: "#/definitions/Order"
      next:
        type: object
        properties:
          limit:
            type: number
            format: int32
            description: The limit on the number of results retrieved.
            example: 1
          startAt:
            type: string
            description: The last order ID in the query.
            example: FF4F198RNMV5
          createdAt:
            type: string
            description: The date of creation of the last order in the query.
            example: "2019-10-25T22:56:06.000Z"
